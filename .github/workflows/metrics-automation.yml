name: 'An√°lise de M√©tricas - Execu√ß√£o Autom√°tica'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  run-metrics-scripts:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: read
      pull-requests: read
    
    steps:
    - name: üì• Checkout do reposit√≥rio
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üêç Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub plotly kaleido numpy pandas
        
        # Verificar se existe requirements.txt e instalar
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Listar depend√™ncias instaladas
        pip list
    
    - name: üìÅ Verificar estrutura de diret√≥rios
      run: |
        echo "üìÇ Estrutura atual do reposit√≥rio:"
        find . -type f -name "*.py" | head -20
        
        echo "üìÇ Conte√∫do da pasta scripts:"
        if [ -d "scripts" ]; then
          ls -la scripts/
        else
          echo "‚ùå Pasta 'scripts' n√£o encontrada!"
          exit 1
        fi
    
    - name: üîç Descobrir scripts Python
      id: find-scripts
      run: |
        echo "üîç Procurando scripts Python na pasta /scripts/..."
        
        if [ ! -d "scripts" ]; then
          echo "‚ùå Diret√≥rio 'scripts' n√£o existe!"
          exit 1
        fi
        
        # Encontrar todos os arquivos .py na pasta scripts
        scripts=$(find scripts/ -name "*.py" -type f | sort)
        
        if [ -z "$scripts" ]; then
          echo "‚ùå Nenhum script Python encontrado na pasta 'scripts'!"
          exit 1
        fi
        
        echo "üìú Scripts encontrados:"
        echo "$scripts"
        
        # Salvar lista de scripts para uso posterior
        echo "$scripts" > scripts_list.txt
        
        # Contar scripts
        script_count=$(echo "$scripts" | wc -l)
        echo "üìä Total de scripts encontrados: $script_count"
        
        echo "scripts_found=$script_count" >> $GITHUB_OUTPUT
    
    - name: üöÄ Executar scripts de m√©tricas
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "üöÄ Iniciando execu√ß√£o dos scripts de m√©tricas..."
        echo "üìç Reposit√≥rio: $REPO_OWNER/$REPO_NAME"
        echo "üîë Token configurado: $([ -n "$GH_TOKEN" ] && echo "‚úÖ Sim" || echo "‚ùå N√£o")"
        
        # Criar diret√≥rios necess√°rios
        mkdir -p data/desempenho-processo
        mkdir -p data/recurso-custo
        mkdir -p docs/assets/imgs/graficos/historico/grafico-desempenho-processo
        mkdir -p docs/assets/imgs/graficos/historico/grafico-recurso-custo
        mkdir -p docs/assets/imgs/graficos
        
        # Contador de sucessos e falhas
        success_count=0
        error_count=0
        
        # Ler lista de scripts
        while IFS= read -r script; do
          if [ -f "$script" ]; then
            echo ""
            echo "üîÑ Executando: $script"
            echo "‚è∞ Hor√°rio: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "----------------------------------------"
            
            # Executar script e capturar sa√≠da
            if timeout 300 python "$script"; then
              echo "‚úÖ $script executado com sucesso!"
              ((success_count++))
            else
              echo "‚ùå Erro ao executar $script"
              echo "üîç Verificando se o arquivo existe: $([ -f "$script" ] && echo "Sim" || echo "N√£o")"
              ((error_count++))
            fi
            
            echo "----------------------------------------"
          else
            echo "‚ö†Ô∏è  Script n√£o encontrado: $script"
            ((error_count++))
          fi
        done < scripts_list.txt
        
        echo ""
        echo "üìä RESUMO DA EXECU√á√ÉO:"
        echo "‚úÖ Scripts executados com sucesso: $success_count"
        echo "‚ùå Scripts com erro: $error_count"
        echo "üìà Total processado: $((success_count + error_count))"
        
        # Verificar se algum arquivo foi gerado
        echo ""
        echo "üìÅ Arquivos gerados:"
        find data/ -name "*.csv" -type f 2>/dev/null | head -10 || echo "Nenhum CSV encontrado"
        find docs/assets/imgs/graficos/ -name "*.png" -type f 2>/dev/null | head -10 || echo "Nenhum gr√°fico encontrado"
    
    - name: üìä Verificar arquivos gerados
      run: |
        echo "üìä Verificando arquivos gerados..."
        
        echo "üìà CSVs gerados:"
        find data/ -name "*.csv" -type f -exec ls -lh {} \; 2>/dev/null || echo "Nenhum CSV encontrado"
        
        echo ""
        echo "üñºÔ∏è  Gr√°ficos gerados:"
        find docs/assets/imgs/graficos/ -name "*.png" -type f -exec ls -lh {} \; 2>/dev/null || echo "Nenhum gr√°fico encontrado"
        
        echo ""
        echo "üìÅ Estrutura de diret√≥rios criada:"
        tree data/ docs/assets/imgs/graficos/ 2>/dev/null || find data/ docs/assets/imgs/graficos/ -type d 2>/dev/null || echo "Diret√≥rios n√£o encontrados"
    
    - name: üíæ Commit e push dos arquivos gerados
      run: |
        echo "üíæ Configurando Git..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - M√©tricas"
        
        echo "üìù Verificando mudan√ßas..."
        git status
        
        # Adicionar apenas arquivos de dados e gr√°ficos
        git add data/ docs/assets/imgs/graficos/ 2>/dev/null || true
        
        # Verificar se h√° mudan√ßas para commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  Nenhuma mudan√ßa detectada nos arquivos de m√©tricas."
        else
          echo "üíæ Fazendo commit das m√©tricas atualizadas..."
          
          # Criar mensagem de commit detalhada
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          commit_msg="ü§ñ Atualiza√ß√£o autom√°tica de m√©tricas - $timestamp

          üìä M√©tricas geradas automaticamente via GitHub Actions
          üîÑ Trigger: Merge na branch main
          ‚è∞ Executado em: $timestamp
          üè∑Ô∏è  Commit: ${{ github.sha }}
          
          Arquivos atualizados:
          $(git diff --staged --name-only | sed 's/^/- /')"
          
          git commit -m "$commit_msg"
          
          echo "üöÄ Fazendo push das altera√ß√µes..."
          git push
          
          echo "‚úÖ M√©tricas atualizadas e commitadas com sucesso!"
        fi
    
    - name: üìã Resumo da execu√ß√£o
      if: always()
      run: |
        echo ""
        echo "üéØ RESUMO FINAL DA EXECU√á√ÉO"
        echo "=========================="
        echo "üìÖ Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "üîÑ Trigger: ${{ github.event_name }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üë§ Autor: ${{ github.actor }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo ""
        
        # Status dos arquivos
        csv_count=$(find data/ -name "*.csv" -type f 2>/dev/null | wc -l)
        png_count=$(find docs/assets/imgs/graficos/ -name "*.png" -type f 2>/dev/null | wc -l)
        
        echo "üìä Arquivos gerados:"
        echo "   üìà CSVs: $csv_count"
        echo "   üñºÔ∏è  Gr√°ficos: $png_count"
        echo ""
        
        if [ "$csv_count" -gt 0 ] || [ "$png_count" -gt 0 ]; then
          echo "‚úÖ Execu√ß√£o conclu√≠da com sucesso!"
        else
          echo "‚ö†Ô∏è  Execu√ß√£o conclu√≠da, mas poucos arquivos foram gerados."
        fi
        
        echo "=========================="

    - name: üîî Notifica√ß√£o de erro
      if: failure()
      run: |
        echo "‚ùå FALHA NA EXECU√á√ÉO DOS SCRIPTS"
        echo "================================"
        echo "Verifique os logs acima para identificar o problema."
        echo "Poss√≠veis causas:"
        echo "- Erro de autentica√ß√£o com GitHub API"
        echo "- Script com erro de sintaxe"
        echo "- Depend√™ncias faltando"
        echo "- Timeout na execu√ß√£o"
        echo "================================"